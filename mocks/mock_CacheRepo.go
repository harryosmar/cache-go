// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/harryosmar/cache-go (interfaces: CacheRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheRepo is a mock of CacheRepo interface.
type MockCacheRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepoMockRecorder
}

// MockCacheRepoMockRecorder is the mock recorder for MockCacheRepo.
type MockCacheRepoMockRecorder struct {
	mock *MockCacheRepo
}

// NewMockCacheRepo creates a new mock instance.
func NewMockCacheRepo(ctrl *gomock.Controller) *MockCacheRepo {
	mock := &MockCacheRepo{ctrl: ctrl}
	mock.recorder = &MockCacheRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepo) EXPECT() *MockCacheRepoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCacheRepo) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCacheRepoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCacheRepo)(nil).Close))
}

// Delete mocks base method.
func (m *MockCacheRepo) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacheRepo)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockCacheRepo) Get(arg0 context.Context, arg1 string) ([]byte, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockCacheRepoMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheRepo)(nil).Get), arg0, arg1)
}

// Increment mocks base method.
func (m *MockCacheRepo) Increment(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increment indicates an expected call of Increment.
func (mr *MockCacheRepoMockRecorder) Increment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockCacheRepo)(nil).Increment), arg0, arg1)
}

// IncrementWithTTL mocks base method.
func (m *MockCacheRepo) IncrementWithTTL(arg0 context.Context, arg1 string, arg2 time.Duration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementWithTTL", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementWithTTL indicates an expected call of IncrementWithTTL.
func (mr *MockCacheRepoMockRecorder) IncrementWithTTL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementWithTTL", reflect.TypeOf((*MockCacheRepo)(nil).IncrementWithTTL), arg0, arg1, arg2)
}

// KeysByPattern mocks base method.
func (m *MockCacheRepo) KeysByPattern(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeysByPattern", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeysByPattern indicates an expected call of KeysByPattern.
func (mr *MockCacheRepoMockRecorder) KeysByPattern(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeysByPattern", reflect.TypeOf((*MockCacheRepo)(nil).KeysByPattern), arg0, arg1)
}

// LPush mocks base method.
func (m *MockCacheRepo) LPush(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPush", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LPush indicates an expected call of LPush.
func (mr *MockCacheRepoMockRecorder) LPush(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockCacheRepo)(nil).LPush), arg0, arg1, arg2)
}

// LRange mocks base method.
func (m *MockCacheRepo) LRange(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRange", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LRange indicates an expected call of LRange.
func (mr *MockCacheRepoMockRecorder) LRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRange", reflect.TypeOf((*MockCacheRepo)(nil).LRange), arg0, arg1, arg2, arg3)
}

// LRem mocks base method.
func (m *MockCacheRepo) LRem(arg0 context.Context, arg1 string, arg2 int64, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRem", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// LRem indicates an expected call of LRem.
func (mr *MockCacheRepoMockRecorder) LRem(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRem", reflect.TypeOf((*MockCacheRepo)(nil).LRem), arg0, arg1, arg2, arg3)
}

// LTrim mocks base method.
func (m *MockCacheRepo) LTrim(arg0 context.Context, arg1 string, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LTrim", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// LTrim indicates an expected call of LTrim.
func (mr *MockCacheRepoMockRecorder) LTrim(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LTrim", reflect.TypeOf((*MockCacheRepo)(nil).LTrim), arg0, arg1, arg2, arg3)
}

// Ping mocks base method.
func (m *MockCacheRepo) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockCacheRepoMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCacheRepo)(nil).Ping), arg0)
}

// Store mocks base method.
func (m *MockCacheRepo) Store(arg0 context.Context, arg1 string, arg2 []byte, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockCacheRepoMockRecorder) Store(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCacheRepo)(nil).Store), arg0, arg1, arg2, arg3)
}

// StoreWithoutTTL mocks base method.
func (m *MockCacheRepo) StoreWithoutTTL(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWithoutTTL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreWithoutTTL indicates an expected call of StoreWithoutTTL.
func (mr *MockCacheRepoMockRecorder) StoreWithoutTTL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWithoutTTL", reflect.TypeOf((*MockCacheRepo)(nil).StoreWithoutTTL), arg0, arg1, arg2)
}

// ValuesByKeys mocks base method.
func (m *MockCacheRepo) ValuesByKeys(arg0 context.Context, arg1 []string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValuesByKeys", arg0, arg1)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValuesByKeys indicates an expected call of ValuesByKeys.
func (mr *MockCacheRepoMockRecorder) ValuesByKeys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValuesByKeys", reflect.TypeOf((*MockCacheRepo)(nil).ValuesByKeys), arg0, arg1)
}
